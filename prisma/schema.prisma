generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// defining the nextauth schema
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], name: "userId")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], name: "userId")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Game          Game[]
}

// types of the quiz, multiple choice or open ended
enum GameType {
  mcq
  open_ended
}

// quiz schema
model Game {
  id          String     @id @default(cuid())
  // each user is tied to a quiz
  userId      String
  timeStarted DateTime
  topic       String
  timeEnd     DateTime?
  gameType    GameType
  // one game has one user, and one user has many games
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  questions    Question[]

  @@index([userId], name: "userId")
}

// schema for the questions it will give back
model Question {
  id                String   @id @default(cuid())
  question          String
  answer            String
  // each question will be linked to a quiz, and a quiz can have multiple questions
  gameId            String
  // will have a json array of 4 questions
  options           Json? // will only apply for multiple choice questions 
  percentageCorrect Float? // will only apply for open ended questions
  isCorrect Boolean? // will only apply for multiple choice questions 
  questionType      GameType
  userAnswer        String?

  game Game @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@index([gameId], name: "gameId")
}
